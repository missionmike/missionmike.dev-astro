<button class="theme-toggle" aria-label="Toggle dark mode" data-aos="fade-in">
  <div class="toggle-slider">
    <div class="icon-wrapper sun">
      <svg
        class="sun-icon"
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
    </div>
    <div class="icon-wrapper moon">
      <svg
        class="moon-icon"
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
    </div>
  </div>
</button>

<script>
  import { setCookie } from '../../utils/cookies';

  const htmlElement = document.documentElement;

  // Function to set theme
  function setTheme(theme: 'dark' | 'light'): void {
    htmlElement.setAttribute('data-theme', theme);
    document.body.setAttribute('data-theme', theme);
    setCookie('theme', theme);
  }

  // Function to toggle theme
  function toggleTheme(): void {
    const currentTheme = htmlElement.getAttribute('data-theme') || 'dark';
    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
    setTheme(newTheme as 'dark' | 'light');
  }

  // Add click event listeners to all theme toggles
  function initializeThemeToggles() {
    const themeToggles = document.querySelectorAll('.theme-toggle');
    themeToggles.forEach((toggle) => {
      toggle.addEventListener('click', toggleTheme);
    });
  }

  // Initialize on load and after any dynamic content changes
  document.addEventListener('DOMContentLoaded', initializeThemeToggles);
  initializeThemeToggles();
</script>

<style>
  .theme-toggle {
    background: var(--color-background);
    border: 2px solid var(--color-text);
    padding: 0.25rem;
    cursor: pointer;
    color: var(--color-text);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 30px;
    width: 70px;
    height: 36px;
    position: relative;
    overflow: hidden;
    box-shadow: 0 2px 5px var(--color-shadow);
  }

  @media (max-width: 768px) {
    .theme-toggle {
      width: 64px;
      height: 34px;
      padding: 0.25rem;
    }

    .theme-toggle::after {
      width: 26px;
      height: 26px;
      top: 2px;
      left: 2px;
    }

    :global([data-theme='light']) .theme-toggle::after {
      transform: translateX(32px);
    }

    :global([data-theme='light']) .theme-toggle:active::after {
      transform: translateX(32px) scale(0.9);
    }

    .icon-wrapper {
      width: 28px;
      height: 28px;
    }

    .sun-icon,
    .moon-icon {
      width: 18px;
      height: 18px;
    }
  }

  .toggle-slider {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 2px;
  }

  .icon-wrapper {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    z-index: 1;
  }

  .sun-icon,
  .moon-icon {
    color: var(--color-text);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  /* Show correct icon based on theme */
  :global([data-theme='light']) .sun-icon {
    opacity: 1;
  }

  :global([data-theme='dark']) .moon-icon {
    opacity: 1;
  }

  .theme-toggle:hover {
    opacity: 0.9;
    transform: scale(1.05);
  }

  .theme-toggle:focus {
    outline: none;
    box-shadow: 0 0 0 2px var(--color-accent);
  }

  /* Sliding knob */
  .theme-toggle::after {
    content: '';
    position: absolute;
    top: 2px;
    left: 2px;
    width: 28px;
    height: 28px;
    background-color: var(--color-text);
    border-radius: 50%;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 2;

    @media (max-width: 768px) {
      width: 26px;
      height: 26px;
    }
  }

  /* Move knob to right for light mode */
  :global([data-theme='light']) .theme-toggle::after {
    transform: translateX(34px);

    @media (max-width: 768px) {
      transform: translateX(30px);
    }
  }

  /* Active state animation */
  .theme-toggle:active::after {
    transform: scale(0.9);
  }

  :global([data-theme='light']) .theme-toggle:active::after {
    transform: translateX(34px) scale(0.9);
  }
</style>
