---
type Photo = {
  src: string;
  alt: string;
  caption: string;
  size?: 'small' | 'medium' | 'large';
};

interface Props {
  photos: Photo[];
  columnIndex: number;
}

const { photos, columnIndex } = Astro.props;
---

<div class="column">
  {
    photos
      .filter((_, i) => i % 3 === columnIndex)
      .map((photo) => (
        <div
          class={`photo-tile ${photo.size || 'small'}`}
          data-aos={columnIndex === 0 ? 'fade-right' : columnIndex === 1 ? 'fade-up' : 'fade-left'}
          data-aos-delay={columnIndex === 1 ? 100 : columnIndex === 2 ? 200 : 0}
        >
          <button
            class="photo-button"
            data-src={photo.src}
            data-alt={photo.alt}
            data-caption={photo.caption}
          >
            <img
              src={photo.src}
              alt={photo.alt}
              class="photo"
              data-aos={
                columnIndex === 0 ? 'fade-right' : columnIndex === 1 ? 'fade-up' : 'fade-left'
              }
              data-aos-delay={columnIndex === 1 ? 100 : columnIndex === 2 ? 200 : 0}
            />
          </button>
        </div>
      ))
  }
</div>

<style>
  .column {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .photo-tile {
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    width: 100%;
  }

  .photo-tile.small {
    aspect-ratio: 1;
  }

  .photo-tile.medium {
    aspect-ratio: 4/5;
  }

  .photo-tile.large {
    aspect-ratio: 3/4;
  }

  .photo-button {
    width: 100%;
    height: 100%;
    padding: 0;
    border: none;
    background: none;
    cursor: pointer;
  }

  .photo {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
</style>
