---
import PhotoColumn from './PhotoColumn.astro';
import { photos } from '../../data/photos';
---

<div class="photo-mosaic">
  <PhotoColumn photos={photos} columnIndex={0} />
  <PhotoColumn photos={photos} columnIndex={1} />
  <PhotoColumn photos={photos} columnIndex={2} />
</div>

<!-- Modal -->
<div id="photoModal" class="modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <button class="nav-button prev">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path fill="currentColor" d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"></path>
      </svg>
    </button>
    <button class="nav-button next">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path fill="currentColor" d="M8.59 16.59L10 18l6-6-6-6-1.41 1.41L13.17 12z"></path>
      </svg>
    </button>
    <div class="slide-container">
      <img id="modalBlurBackground" class="blur-background" src="" alt="" />
      <img id="modalImage" src="" alt="" />
    </div>
    <p id="modalCaption" class="caption"></p>
  </div>
</div>

<script>
  let currentPhotoIndex = 0;
  let photoButtons: NodeListOf<HTMLButtonElement>;

  function initPhotoModal() {
    photoButtons = document.querySelectorAll('.photo-button');
    const modal = document.getElementById('photoModal');
    const closeButton = modal?.querySelector('.close-button');
    const prevButton = modal?.querySelector('.nav-button.prev');
    const nextButton = modal?.querySelector('.nav-button.next');
    const slideContainer = modal?.querySelector('.slide-container');

    // Add click handlers to all photo buttons
    photoButtons.forEach((button, index) => {
      button.addEventListener('click', () => {
        currentPhotoIndex = index;
        openModal();
      });
    });

    // Add modal controls
    if (closeButton) {
      closeButton.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent event from bubbling to window
        closeModal();
      });
      closeButton.addEventListener('touchend', (e) => {
        e.stopPropagation(); // Prevent event from bubbling to window
        closeModal();
      });
    }
    prevButton?.addEventListener('click', () => navigateSlide(-1));
    nextButton?.addEventListener('click', () => navigateSlide(1));

    // Add touch gesture support
    let touchStartX = 0;
    let touchEndX = 0;

    slideContainer?.addEventListener('touchstart', (e) => {
      const touch = (e as TouchEvent).touches[0];
      touchStartX = touch.screenX;
    });

    slideContainer?.addEventListener('touchend', (e) => {
      const touch = (e as TouchEvent).changedTouches[0];
      touchEndX = touch.screenX;
      handleSwipe();
    });

    function handleSwipe() {
      const swipeThreshold = 50; // minimum distance for swipe
      const swipeDistance = touchEndX - touchStartX;

      if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
          navigateSlide(-1); // swipe right = previous
        } else {
          navigateSlide(1); // swipe left = next
        }
      }
    }

    // Close modal when clicking outside
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        closeModal();
      }
    });

    // Keyboard navigation
    window.addEventListener('keydown', (event) => {
      if (modal?.style.display === 'flex') {
        switch (event.key) {
          case 'ArrowLeft':
            navigateSlide(-1);
            break;
          case 'ArrowRight':
            navigateSlide(1);
            break;
          case 'Escape':
            closeModal();
            break;
        }
      }
    });
  }

  function openModal() {
    const modal = document.getElementById('photoModal');
    if (!modal) return;

    const currentButton = photoButtons[currentPhotoIndex];
    const modalImg = document.getElementById('modalImage') as HTMLImageElement;
    const modalCaption = document.getElementById('modalCaption');
    const blurBg = document.getElementById('modalBlurBackground') as HTMLImageElement;

    if (modalImg && modalCaption && currentButton.dataset.src) {
      modal.style.display = 'flex';
      // Trigger fade in animation
      setTimeout(() => {
        modal.classList.add('visible');
      }, 10);

      // Set both main image and blur background
      modalImg.style.opacity = '0';
      blurBg.style.opacity = '0';

      // Load new image
      modalImg.src = currentButton.dataset.src;
      blurBg.src = currentButton.dataset.src;
      modalImg.alt = currentButton.dataset.alt || '';
      modalCaption.textContent = currentButton.dataset.caption || '';

      // Fade in the images
      setTimeout(() => {
        modalImg.style.opacity = '1';
        blurBg.style.opacity = '0.5';
      }, 50);
    }
  }

  function closeModal() {
    const modal = document.getElementById('photoModal');
    if (modal) {
      modal.classList.remove('visible');
      setTimeout(() => {
        modal.style.display = 'none';
      }, 300); // Match the transition duration
    }
  }

  function navigateSlide(direction: number) {
    const modalImg = document.getElementById('modalImage') as HTMLImageElement;
    const blurBg = document.getElementById('modalBlurBackground') as HTMLImageElement;

    // Fade out current image
    modalImg.style.opacity = '0';
    blurBg.style.opacity = '0';

    setTimeout(() => {
      currentPhotoIndex =
        (currentPhotoIndex + direction + photoButtons.length) % photoButtons.length;
      openModal();
    }, 300);
  }

  // Initialize when the DOM is ready
  document.addEventListener('DOMContentLoaded', initPhotoModal);
</script>

<style>
  .photo-mosaic {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    width: 100%;

    @media (max-width: 1024px) {
      gap: 0.25rem;
    }
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(var(--color-primary-rgb), 0);
    z-index: 1000;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transition:
      opacity 0.3s ease,
      background-color 0.3s ease;
  }

  .modal::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.95);
    z-index: 1000;
  }

  .modal.visible {
    opacity: 1;
    background-color: rgba(var(--color-primary-rgb), 0.95);
  }

  .modal-content {
    position: relative;
    max-width: 90%;
    max-height: 90vh;
    margin: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    background: var(--color-background-gradient);
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
    z-index: 1001;
  }

  .close-button {
    position: absolute;
    top: -40px;
    right: 0;
    color: var(--color-text);
    font-size: 30px;
    cursor: pointer;
    z-index: 1001;
  }

  .slide-container {
    position: relative;
    width: 100%;
    height: 80vh;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

  .blur-background {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    filter: blur(20px);
    transform: scale(1.1);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  #modalImage {
    position: relative;
    max-width: 100%;
    max-height: 80vh;
    object-fit: contain;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
  }

  .nav-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: var(--color-background-gradient);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    font-size: 24px;
    color: var(--color-text);
    cursor: pointer;
    z-index: 2;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .nav-button:hover {
    background: var(--color-background);
  }

  .prev {
    left: -50px;
  }

  .next {
    right: -50px;
  }

  .caption {
    position: relative;
    color: var(--color-text);
    text-align: center;
    padding: 1rem;
    margin: 0;
    background-color: var(--color-background);
    width: 100%;
    z-index: 1;
  }

  @media (max-width: 768px) {
    .nav-button {
      display: none; /* Hide navigation arrows on mobile */
    }

    .slide-container {
      touch-action: pan-y pinch-zoom; /* Enable touch gestures */
    }

    .close-button {
      top: 10px;
      right: 10px;
    }
  }
</style>
